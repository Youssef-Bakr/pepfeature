#!/usr/bin/env python
# coding: utf-8

# **Data set:**
# 
# Ov_data.csv: this is a sample data set related to a specific organism. The important column in this data set is names "Info_window_seq". It contains 15-character strings representing fixed-length protein fragments (called "peptides") generated by running a sliding window over the organism protein strings.
# 
# **Initial features to calculate:**
# 
# Proteins are composed of 20 aminoacids, represented by different letters. Valid letters are: A, C, D, E, F, G, H, I, K, L, M, N, P, Q, R, S, T, V, W, Y.
# 
# 1) We need to calculate the percent of each aminoacid in the peptides. 
# 2) This will result in 20 features (columns), which should be called
# 
# feat_perc_A, feat_perc_C, ..., feat_perc_Y.
# 
# **Notes:**
# 
# 1) The frequency is calculated as (number_of_occurrences_of_letter / length_of_peptide)
# 
# 2) if a letter does not occur in a given peptide it should have a frequency of zero.
# 
# 3) if an invalid letter appears in the sequence, it should be removed before the frequencies are calculated.
# 

# In[3]:


import time
import pandas as pd

pd.set_option("display.max_columns", None)

# In[4]:

# 'Ov_data.csv' has to be in the same location as program.
df = pd.read_csv('Ov_data.csv')

valid_letters = ['A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'Y']

# Create columns
for letter in valid_letters:
    df['feat_perc_{}'.format(letter)] = 0


# In[7]:


def peptides_feature_generator(peptide_row):
    peptide = peptide_row['Info_window_seq']
    length_of_peptide = len(peptide)
    number_of_occurrences_of_letter_dict = {'A': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 0, 'G': 0, 'H': 0, 'I': 0, 'K': 0,
                                            'L': 0, 'M': 0, 'N': 0, 'P': 0, 'Q': 0, 'R': 0, 'S': 0, 'T': 0, 'V': 0,
                                            'W': 0, 'Y': 0}

    # 1) Find out number of occurences of each letter in the peptide & figure out peptide length (i.e. number of valid amino-acid letters)
    for i in range(15):
        peptide_letter = peptide[i]

        if peptide_letter in valid_letters:
            number_of_occurrences_of_letter_dict[peptide_letter] += 1

        else:
            length_of_peptide -= 1

    # 2) Find out & set the percentage of each letter in the peptides
    for key, value in number_of_occurrences_of_letter_dict.items():
        df.loc[peptide_row.name, 'feat_perc_{}'.format(key)] = (value / length_of_peptide) * 100


# **Running the code on dataframe (Ov_data.csv)**

# # In[29]:


# start_time = time.time()
# df.apply(peptides_feature_generator, axis=1)
# print("--- %s seconds ---" % (time.time() - start_time))
#
#
# # In[32]:
#
#
# print(df[['Info_window_seq', 'feat_perc_A',
#        'feat_perc_C', 'feat_perc_D', 'feat_perc_E', 'feat_perc_F',
#        'feat_perc_G', 'feat_perc_H', 'feat_perc_I', 'feat_perc_K',
#        'feat_perc_L', 'feat_perc_M', 'feat_perc_N', 'feat_perc_P',
#        'feat_perc_Q', 'feat_perc_R', 'feat_perc_S', 'feat_perc_T',
#        'feat_perc_V', 'feat_perc_W', 'feat_perc_Y']])
#


# **For testing: the code with smaller dateframe (quicker run time)**

# In[39]:


start_time = time.time()

df.loc[range(10)].apply(peptides_feature_generator, axis=1)

print("--- %s seconds ---" % (time.time() - start_time))

print(df.loc[range(10), ['Info_window_seq', 'feat_perc_A',
                         'feat_perc_C', 'feat_perc_D', 'feat_perc_E', 'feat_perc_F',
                         'feat_perc_G', 'feat_perc_H', 'feat_perc_I', 'feat_perc_K',
                         'feat_perc_L', 'feat_perc_M', 'feat_perc_N', 'feat_perc_P',
                         'feat_perc_Q', 'feat_perc_R', 'feat_perc_S', 'feat_perc_T',
                         'feat_perc_V', 'feat_perc_W', 'feat_perc_Y']])

#
#                          'feat_perc_C', 'feat_perc_D', 'feat_perc_E', 'feat_perc_F',
#                          'feat_perc_L', 'feat_perc_M', 'feat_perc_N', 'feat_perc_P',
