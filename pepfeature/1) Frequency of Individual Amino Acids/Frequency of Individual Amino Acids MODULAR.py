
# **Data set:**
# 
# Ov_data.csv: this is a sample data set related to a specific organism. The important column in this data set is names "Info_window_seq". It contains 15-character strings representing fixed-length protein fragments (called "peptides") generated by running a sliding window over the organism protein strings.
# 
# **Initial features to calculate:**
# 
# Proteins are composed of 20 aminoacids, represented by different letters. Valid letters are: A, C, D, E, F, G, H, I, K, L, M, N, P, Q, R, S, T, V, W, Y.
# 
# 1) We need to calculate the percent of each aminoacid in the peptides. 
# 2) This will result in 20 features (columns), which should be called
# 
# feat_perc_A, feat_perc_C, ..., feat_perc_Y.
# 
# **Notes:**
# 
# 1) The frequency is calculated as (number_of_occurrences_of_letter / length_of_peptide)
# 
# 2) if a letter does not occur in a given peptide it should have a frequency of zero.
# 
# 3) if an invalid letter appears in the sequence, it should be removed before the frequencies are calculated.
# 

# In[3]:


import time
import pandas as pd

pd.set_option("display.max_columns", None)

# 'Ov_data.csv' has to be in the same location as program.
df = pd.read_csv('Ov_data.csv')


def peptides_feature_generator(dataframe):

    valid_letters = ['A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'Y']
    # Create columns
    for letter in valid_letters:
        dataframe['feat_perc_{}'.format(letter)] = 0

    for row in dataframe.itertuples():

        peptide = row.Info_window_seq
        length_of_peptide = len(peptide)
        number_of_occurrences_of_letter_dict = {}

        # 1) Find out number of occurences of each letter in the peptide & figure out peptide length (i.e. number of valid amino-acid letters)
        for i in range(len(peptide)):
            peptide_letter = peptide[i]

            if peptide_letter in valid_letters:
                if peptide_letter in number_of_occurrences_of_letter_dict:
                    number_of_occurrences_of_letter_dict[peptide_letter] += 1
                else:
                    number_of_occurrences_of_letter_dict[peptide_letter] = 1
            else:
                length_of_peptide -= 1

        # 2) Find out & set the percentage of each letter in the peptides
        for aa, freq in number_of_occurrences_of_letter_dict.items():
            dataframe.loc[row.Index, 'feat_perc_{}'.format(aa)] = (freq / length_of_peptide) * 100

    return (dataframe)


# **Running the code on dataframe (Ov_data.csv)**

start_time = time.time()
print(peptides_feature_generator(df.loc[range(1)]))
print("--- %s seconds ---" % (time.time() - start_time))


#Testing:

#The OlD above code takes 800 seconds+ with full df
#The new 'Modular' code takes --- 331.00928473472595 seconds ---

